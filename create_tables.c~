#include "maze.h"
#include <math.h>
/**
 *createTables: create trigiometric values to make the program run faster
 *
 *
 *
 *Return: nothing
 */
void createTables(void)
{
int i;
float radian;
static int ANGLE60 = 320;
float fSinTable[(ANGLE60 * 60) + 1];/*trig tables*/
float fISinTable[(ANGLE60 * 60) + 1];
float fCosTable[(ANGLE60 * 60) + 1];
float fICosTable[(ANGLE60 * 60) + 1];
float fTanTable[(ANGLE60 * 60) + 1];
float fITanTable[(ANGLE60 * 60) + 1];
float fFishTable[(ANGLE60 * 60) + 1];
float fXStepTable[(ANGLE60 * 60) + 1];
float fYStepTable[(ANGLE60 * 60) + 1];
for (i = 0; i <= (ANGLE60 * 6); i++)
{
radian = arcToRad(i) + (float)(0.0001);
fSinTable[i] = (float)sin(radian);
fISinTable[i] = (1.0) / (fSinTable[i]);
fCosTable[i] = (float)cos(radian);
fICosTable[i] = (1.0) / (fCosTable[i]);
fTanTable[i] = (float)tan(radian);
fITanTable[i] = (1.0) / (fTanTable[i]);/*facing left*/
if (i >= (ANGLE60 * 3 / 2) && i < (ANGLE60 * 9 / 2))
{
fXStepTable[i] = (float)(64 / fTanTable[i]);
if (fXStepTable[i] > 0)
fXStepTable[i] = -fXStepTable[i];
}/*facing right*/
else
{
fXStepTable[i] = (float)(64 / fTanTable[i]);
if (fXStepTable[i] < 0)
fXStepTable[i] = -fXStepTable[i];
}/*facing down*/
if (i >= 0 && i < (ANGLE60 * 3))
{
fYStepTable[i] = (float)(64 * fTanTable[i]);
if (fYStepTable[i] > 0)
fYStepTable[i] = -fYStepTable[i];
}/*facing up*/
else
{
fYStepTable[i] = (float)(64 * fTanTable[i]);
if (fYStepTable[i] < 0)
fYStepTable[i] = -fYStepTable[i];
}}
for (i -= (ANGLE60 / 3); i <= (ANGLE60 / 2); i++)
{
radian = arcToRad(i);
fFishTable[i + (ANGLE60 / 2)] = (float)(1.0 / cos(radian));
}}
